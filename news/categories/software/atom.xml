<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software | DynaMid]]></title>
  <link href="http://dynamid.citi-lab.fr/news/categories/software/atom.xml" rel="self"/>
  <link href="http://dynamid.citi-lab.fr/"/>
  <updated>2013-02-19T15:13:41+01:00</updated>
  <id>http://dynamid.citi-lab.fr/</id>
  <author>
    <name><![CDATA[DynaMid Project]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Release of JooFlux r1]]></title>
    <link href="http://dynamid.citi-lab.fr/news/2013/02/19/release-of-jooflux-r1/"/>
    <updated>2013-02-19T15:07:00+01:00</updated>
    <id>http://dynamid.citi-lab.fr/news/2013/02/19/release-of-jooflux-r1</id>
    <content type="html"><![CDATA[<p>The DynaMid members are pleased to announce the second release of JooFlux.</p>

<p>JooFlux r1 can be obtained from <a href="https://github.com/dynamid/jooflux">https://github.com/dynamid/jooflux</a>
and is made available under the terms of the
<a href="http://www.mozilla.org/MPL/2.0/">Mozilla Public License Version 2.0</a>.</p>

<p>This release improves the compatibility with existing JVM-based applications. It also features additions
to facilitate the implementation of remote management applications.</p>

<p>We encourage the wider researchers and practitioners community to report any issue with JooFlux, and
contribute bug fixes and improvements.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JooFlux Initial Public Release]]></title>
    <link href="http://dynamid.citi-lab.fr/news/2012/10/03/jooflux-initial-public-release/"/>
    <updated>2012-10-03T12:00:00+02:00</updated>
    <id>http://dynamid.citi-lab.fr/news/2012/10/03/jooflux-initial-public-release</id>
    <content type="html"><![CDATA[<p>The DynaMid members are pleased to announce the initial public release of JooFlux:</p>

<blockquote><p>JooFlux a JVM agent that allows both the dynamic replacement of method implementations and the
application of aspect advices. Compared to existing approaches, JooFlux takes a novel route by
taking advantage of the new <code>invokedynamic</code> instruction added in Java SE 7. The runtime overhead of
JooFlux is marginal for method invocations, and fairly limited when aspects are being injected. In
any case, JooFlux shows interesting performance compared to related approaches such as AOP tools or
dynamic languages that rely on dynamic dispatch. More interestingly, JooFlux does not involve
reloading whole classes on either method replacement or advice injection, which keeps a large range
of just-in-time compilation optimizations valid.</p></blockquote>

<p>JooFlux r0 can be obtained from <a href="https://github.com/dynamid/jooflux">https://github.com/dynamid/jooflux</a>
and is made available under the terms of the
<a href="http://www.mozilla.org/MPL/2.0/">Mozilla Public License Version 2.0</a>.</p>

<p>While further scientific publications are foreseen, we also released a research technical report called
<a href="http://hal.inria.fr/hal-00737897"><strong>"JooFlux: Hijacking Java 7 InvokeDynamic To Support Live Code Modifications"</strong></a>.
It is available <a href="http://hal.inria.fr/hal-00737897">on the HAL INRIA open archive</a>, and hopefully soon
on <a href="http://arxiv.org/">arXiv</a>.</p>

<p>We encourage the wider researchers and practitioners community to report any issue with JooFlux, and
contribute bug fixes and improvements.</p>
]]></content>
  </entry>
  
</feed>
